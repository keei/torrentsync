#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
self_file =
  if File.symlink?(__FILE__)
    require 'pathname'
    Pathname.new(__FILE__).realpath
  else
    __FILE__
  end
$:.unshift(File.dirname(self_file) + "/../lib")

require 'torrentsync'
require 'haml'
require 'sinatra'
require 'bencode'
require 'ipaddr'

TORRENTSYNC_HOME = File.dirname(__FILE__) + '/../'
set :public, TORRENTSYNC_HOME + 'public'
set :views, TORRENTSYNC_HOME + 'views'

enable :sessions

helpers do

  include Rack::Utils; alias_method :h, :escape_html
  def partial(template, options = {})
    options = options.merge({:layout => false})
    template = "_#{template.to_s}".to_sym
    haml(template, options)
  end

end

CONTENT_TYPES = {
    :html => 'text/html',
    :css => 'text/css',
    :js => 'application/javascript',
    :yaml => 'text/yaml',
    :txt => 'text/plain',
    }

before do
  request_uri = case request.env['REQUEST_URI']
    when /\.css$/ : :css
    when /\.js$/ : :js
    when /\.yaml$/ : :txt
    when /\.txt$/ : :txt
    else :html
  end
  content_type CONTENT_TYPES[request_uri], :charset => 'utf-8'
  response.headers['Cache-Control'] = 'no-cache'
end

get '/' do
  peers = get_peers
  torrents, status = get_torrents(peers)
  haml :index, :locals => {
      :peers => peers, :torrents => torrents, :status => status }
end

get '/announce' do
  compact = params[:compact] == '1' # TODO
  peers = get_peers.map do |v|
    host = v[1]
    port = v[2].to_i
    ip = begin
      IPAddr.new(host)
    rescue
      IPAddr.new(Socket::getaddrinfo(host, nil)[0][3])
    end
    [ip.to_i, port].pack("Nn")
  end
  BEncode.dump({ 'interval' => 5 * 60, 'peers' => peers })
end
